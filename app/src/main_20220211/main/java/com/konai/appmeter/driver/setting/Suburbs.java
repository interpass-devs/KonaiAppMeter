package com.konai.appmeter.driver.setting;

import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.location.Location;
import android.os.Build;
import android.os.Environment;
import android.util.Log;

import com.konai.appmeter.driver.DB.SQLiteControl;
import com.konai.appmeter.driver.DB.SQLiteHelper;
import com.konai.appmeter.driver.MainActivity;
import com.konai.appmeter.driver.service.LocService;
import com.konai.appmeter.driver.struct.AMBlestruct;
import com.konai.appmeter.driver.struct.gpspoint;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;

public class Suburbs {

////////////////////
//20210325
    public static ArrayList<gpspoint> msuburbpoint  = new ArrayList<gpspoint>();; // 대기지역 좌표
    public static boolean mSuburbOK = true;

//20210325
    public static void suburbpoint_add(double x, double y)
    {

        gpspoint xy = new gpspoint(x, y);
        msuburbpoint.add(xy);
    }

    public static boolean Readpoint_suburb(){

        String sdata;
        File saveFile = null;
        if( Build.VERSION.SDK_INT < 29) saveFile = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + "/appmeter");
        else saveFile = Info.gMainactivity.getExternalFilesDir("/appmeter");

        StringBuffer strBuffer = new StringBuffer();
        try{
            BufferedReader reader = new BufferedReader(new FileReader(saveFile + "/suburb.txt"));
            String line="";
            while((line=reader.readLine())!=null){
                strBuffer.append(line+"\n");
            }

            reader.close();
        }catch (IOException e){
            e.printStackTrace();
            return false;
        }

        String[] splitDatas = strBuffer.toString().split(";");


        for(int i=0; i<splitDatas.length; i++) {

            String[] unitData = splitDatas[i].split(",");

            suburbpoint_add(Double.parseDouble(unitData[0]), Double.parseDouble(unitData[1]));
        }

        mSuburbOK = true;

        Log.d("Suburbs","시경계read " + splitDatas.length);
        return true;
    }

    public static void Savepoint_suburb(String sdata) {

        //test appmeter

        if(Info.REPORTREADY)
            Info._displayLOG(true, "saving suburb" + " : " + sdata, "");

        File saveFile = null;
        if( Build.VERSION.SDK_INT < 29)
            saveFile = new File(Environment.getExternalStorageDirectory().getAbsolutePath()+"/appmeter");
        else
            saveFile = Info.gMainactivity.getExternalFilesDir("/appmeter");

        try {
            BufferedWriter buf = new BufferedWriter(new FileWriter(saveFile + "/suburb.txt", false));

            buf.write(sdata);
            buf.flush();
            buf.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    public static void point_suburbtmp()
    {
        String tmp;
//인천.
// String tmp = "126.62944249764311,37.499632518412234;126.60313065796478,37.513650344486884;126.59665587047718,37.548579010391656;126.63985902906148,37.58548082824081;126.59156455632241,37.593011823985485;126.62581676367968,37.602682107868596;126.6512526639701,37.63798791865732;126.67242225512966,37.63384201577993;126.72566531581052,37.59184225525884;126.79369544519706,37.58159385885768;126.7662043574505,37.554242375748366;126.76027622579264,37.51591576136998;126.74235365745886,37.48694907503676;126.77845499939897,37.46207684428783;126.7785287726508,37.46203559089818;126.77923966572729,37.45164188169722;126.77902288729182,37.45102090644409;126.77090454544626,37.43094416277482;126.77083792139524,37.43073681082609;126.7544652746883,37.41757293948264;126.72114288972793,37.38250405568312;126.69505736740857,37.382728422176854;126.66344966004381,37.35053506629968;126.60996708541704,37.38718717658724;126.61166364956264,37.42993401634955;126.59516762247304,37.470751125354276;126.62944249764311,37.499632518412234;126.54063203734842,37.52137210621049;126.58257529425838,37.490646554011505;126.50766160048013,37.466180988746544;126.44308783596472,37.42152563638588;126.38005400083568,37.43990787098436;126.35578510553542,37.46756799120455;126.41691275707815,37.496070547623596;126.47134884661521,37.49847651609366;126.49426957115062,37.507495537162704;126.51237343504722,37.5342594061903;126.54063203734842,37.52137210621049;126.10489742298309,37.27365664691258;126.12030051466729,37.24683567659007;126.16501994179943,37.231520452069546;126.11931236583665,37.21159807869733;126.08963928755354,37.24726670706811;126.10489742298309,37.27365664691258;126.43921536373273,37.23113445861797;126.43502765150147,37.27291676577788;126.47139614227595,37.28452211198935;126.49649461384448,37.2558167689752;126.45781951688586,37.226038140761055;126.43921536373273,37.23113445861797;126.41078726302332,37.411039259746744;126.44129435680796,37.38491394270893;126.41386011569953,37.366484488831475;126.41078726302332,37.411039259746744;126.32141007123677,37.7521179310233;126.3199918547476,37.71163641955494;126.36312215612392,37.69571544695772;126.3698741458859,37.66341975854123;126.33871873184843,37.64743949314964;126.3156769559878,37.684576686919556;126.28246175095768,37.702919090249736;126.28981100240654,37.74072226751897;126.32141007123677,37.7521179310233;126.26451707478925,37.81778583885214;126.29773328966907,37.802199043695516;126.31577075890729,37.77398861988196;126.29081580750011,37.7629425837148;126.24827008507194,37.76560034570511;126.21634667621532,37.77815916115239;126.22322045538863,37.80503670281207;126.26451707478925,37.81778583885214;126.43121685572747,37.82986908194544;126.5068975008081,37.78234762310096;126.52648366049696,37.747326128313986;126.51372172326727,37.72503438286504;126.52251279524307,37.651887425219904;126.54274511634391,37.6178090830475;126.51062866491168,37.59662373953827;126.40316813158975,37.59428252797514;126.3792856257021,37.60958611335555;126.3767633555897,37.636293098460364;126.41263172449081,37.656405203316694;126.39236685339195,37.69419397340533;126.3555906986772,37.70667699662161;126.35057985274231,37.789565062650894;126.38817572692581,37.80670536628266;126.3949295459992,37.82287154699949;126.43121685572747,37.82986908194544;124.70691404651816,37.84705148177522;124.71788130307019,37.81383758257668;124.6799885505802,37.817024381490505;124.70691404651816,37.84705148177522;124.6871734927767,37.98047304204017;124.729720445775,37.97811533012657;124.69626248901929,37.91707230639538;124.63738695819157,37.923945353998434;124.62302020632995,37.95696971255016;124.6871734927767,37.98047304204017";

//성남
//org
//        String tmp = "127.13351765446518,37.474511106427911;127.13352010690555,37.474510680217321;127.133658135507574,37.474513850645266;127.134336769483255,37.474395148628574;127.135057968451747,37.474278620094303;127.184599170166692,37.462236762465615;127.1844310149975,37.462112314952414;127.184368856487524,37.461958105278306;127.184291676912977,37.461734442414325;127.184374074080353,37.46146423912743;127.184233383895489,37.461161827626292;127.184147680487627,37.460988210549473;127.112496311843543,37.335792088339666;127.027712458343117,37.372848459020346;127.12494128017984,37.469299876111727;127.124893918142334,37.469390953906085;127.124929364761456,37.469498839035701;127.124854013145935,37.46953484970448;127.124877993804873,37.469606256191824;127.125201779771771,37.469632082874007;127.125642390966604,37.469367816218011;127.125915860347433,37.469181804900295;127.126016951793531,37.469112312194035;127.126363186975425,37.468798731211585;127.126819313585926,37.468536759321978;127.126828574514079,37.468531694874429;127.12682896729045,37.468536749085573;127.126832700616177,37.468585930888374;127.126919844988819,37.46864056537585;127.126995740293097,37.468626627385326;127.127037643170155,37.468618933368099;127.127052028910555,37.468616287157978;127.127998841615408,37.468442375071966;127.128152993214812,37.468414062644264;127.128229110536637,37.468397988245982;127.128268321768047,37.468389693006309;127.128275858927822,37.468388108166359;127.128396396591398,37.468355867058108;127.128514063811551,37.468317475060083;127.128628363429058,37.468273076875732;127.128738809684108,37.468222871258611;127.128842405522889,37.468172663908994;127.128973266813574,37.468109254397746;127.129062213072118,37.468066162559211;127.129169106556731,37.468014365597405;127.129201049712023,37.467999851966439;127.129234103545812,37.46798704002267;127.129268155080808,37.467975965927209;127.129303023562002,37.467966692944913;127.129338584693542,37.467959248239772;127.130188923738146,37.46780340693163;127.130195919133186,37.467802363160885;127.130203050114133,37.46780128320205;127.130303311368365,37.467784991962304;127.130301386722834,37.467783264133537;127.130544708007932,37.467738660347322;127.130584634892529,37.467732751215848;127.130591980621318,37.467731661988921;127.130639812683967,37.467727897601897;127.130687899040851,37.467727394549371;127.130735844027981,37.467730135243492;127.130783240692665,37.4677361111195;127.130830009866472,37.467745295234621;127.13087554100035,37.467757607167748;127.130919596544729,37.467772948069879;127.131011559933739,37.46780877934188;127.131369426142953,37.467948195322343;127.131386110846194,37.467954700250814;127.131650430731057,37.468057673453643;127.131648170940267,37.468058261594209;127.13173125534135,37.468090633218686;127.1317952908976,37.46811558349976;127.131874642572384,37.468146508522906;127.131959341111255,37.46817741858073;127.132045005304661,37.468204552307924;127.132096983265555,37.468218604594199;127.132132302518784,37.468228161245449;127.132743835619891,37.46837986139959;127.132799600336497,37.468393701940421;127.132705328049113,37.468544733662668;127.132683301429921,37.468580014364001;127.132557180452423,37.468780321127021;127.132498347182036,37.468880307589842;127.132457333011104,37.468956577899213;127.132414848271594,37.469032309220523;127.132349803276654,37.469135726297232;127.1323192451963,37.46924442108665;127.132315412440107,37.46925055214929;127.132243707040985,37.469359382553613;127.132167136847187,37.469466055884098;127.132085588488465,37.469570392055928;127.132058307701996,37.469613850536874;127.132034194272606,37.469658566917154;127.13201358686328,37.469704270523835;127.13199637243676,37.469750961483527;127.131982776458187,37.469798279147504;127.132267037709354,37.470228374046215;127.132272365194424,37.470236657377718;127.13227769268066,37.470244940708895;127.132283133368645,37.470253314014947;127.132288460857254,37.470261597345619;127.132293788504043,37.470269970776194;127.132299229352554,37.470278434181481;127.132304557001717,37.470286807611579;127.132309884809061,37.470295271141509;127.132315212617556,37.470303734671091;127.132320540584288,37.470312288300697;127.132325868395228,37.470320751829789;127.132331196364376,37.470329305458819;127.132336524334747,37.470337859087493;127.13234173941963,37.470346502941297;127.132347067549375,37.470355146669647;127.132352282636703,37.470363790522867;127.132357610925993,37.470372524350815;127.13236282601568,37.470381168203559;127.132368041263632,37.470389902156228;127.132373256669823,37.470398726208657;127.132378472077363,37.470407550260916;127.13238357444213,37.470416374438102;127.13238878985203,37.470425198489806;127.132393892376399,37.470434112766597;127.132398994901905,37.470443027043252;127.132404097428648,37.470451941319581;127.132409200113742,37.470460945695763;127.132414302800058,37.470469950071717;127.132419292443657,37.47047895457262;127.13242428224558,37.470488049173447;127.132429272048654,37.470497143774068;127.132434148809025,37.470506238499745;127.132439138771701,37.47051542319992;127.132444015691561,37.470524608025237;127.132448779725749,37.470533883075632;127.13245365680514,37.470543158000609;127.132458420841715,37.470552433050599;127.132463184879512,37.470561708100377;127.132467949075604,37.470571073250021;127.132472600385967,37.470580528624872;127.132477251540323,37.47058989389943;127.132481789808949,37.470599349399201;127.132486441280037,37.470608894873529;127.132490979550951,37.470618350372845;127.132495405093209,37.470627986197528;127.132499830479503,37.470637531921881;127.132504256024077,37.470647167746215;127.13250856852558,37.470656803695626;127.132512881185463,37.470666529744953;127.132517193846397,37.470676255794089;127.132521393621445,37.47068607206851;127.132525480353394,37.470695888468022;127.132529567086365,37.470705704867491;127.132533540461623,37.470715341191827;127.132536482084063,37.470723230714647;127.132540014635481,37.47073289455755;127.132549806141725,37.470759859723458;127.132552019310566,37.470758424675005;127.132576770595037,37.470826513034751;127.132581030196249,37.470838212336226;127.132615529414238,37.470960043697879;127.132640806787805,37.471083317874246;127.132656748409531,37.471207566476039;127.132824236013235,37.471200965349801;127.132842620812113,37.471532603999179;127.132839975654065,37.471571440152175;127.132831408107918,37.471649746800864;127.132819335651092,37.471727787041601;127.132803871003489,37.471805380547522;127.13278490110882,37.471882527443078;127.132762538845256,37.471959137500676;127.132736783887864,37.472035030518477;127.132707749115994,37.472110116268652;127.13269153530311,37.472147255572722;127.132667118980578,37.472212965758409;127.132645082575834,37.472282097107119;127.132626551839067,37.472351945363414;127.132611526307471,37.472422240228781;127.132600005990597,37.472492981704391;127.132591990583606,37.472563989591137;127.132587593143398,37.47263526376436;127.132586813208391,37.472706533924217;127.132589537898781,37.472777890296186;127.132604534359288,37.473014566999041;127.132619994124639,37.473257550192933;127.132683937592688,37.474268674107506;127.132724595842049,37.474375307631007;127.132736104214501,37.474556306191147;127.132852896438536,37.474627355612611;127.13351765446518,37.474511106427911";

//파주.
//        String tmp = "126.972224606299164,38.007524867714665;126.989397741291825,38.008870265683171;126.993150884116375,38.004079945258162;127.016064807909203,37.991968980811649;127.017107137458254,37.986962813038225;126.957257256506296,37.921553995356561;126.956598399090481,37.921782078050036;126.93940399347585,37.852632543048621;126.925100025758553,37.841587341915172;126.925062330267735,37.841608075329738;126.924971977871948,37.841588403379781;126.913312339865456,37.840790982472981;126.911990751076658,37.791467199927169;126.918663834554451,37.790203150968416;126.935595612921233,37.776396282159638;126.935605329515425,37.776396855672843;126.935602725275345,37.776379113760562;126.920218959508759,37.747027828237385;126.888533990503859,37.722964892451365;126.856032916333461,37.735586384967831;126.855996808680089,37.735561563743943;126.833938547085552,37.725231172749389;126.814287796510797,37.723434588571031;126.804015558819643,37.727269443553858;126.798453009655844,37.737044156788002;126.794021309432267,37.734425336450506;126.793835018887279,37.72613547282667;126.793834231016817,37.726134754868852;126.773417452481823,37.703871366846187;126.726450301428386,37.70328351430642;126.689916052325316,37.688605726821827;126.673951337620082,37.700299250708817;126.662623072104097,37.780699844141623;126.662617860761273,37.780724710348267;126.67123697970996,37.834679320595768;126.659393017629739,37.839915738927388;126.66043523717093,37.84322240888357;126.6757493714139,37.844914491206971;126.670136299563552,37.888025908147711;126.67739862562243,37.898064240827615;126.675469267283319,37.906558089270646;126.68219014611482,37.912095849971614;126.681967368303518,37.914422749953303;126.672918075335346,37.913674546129585;126.665836667374876,37.919956861806604;126.670990840888734,37.955177726872137;126.707696605248728,37.975643318036774;126.796393866094135,37.993695038477142;126.796397126207722,37.99369236039194;126.820544894737878,37.957668141992954;126.835788263099559,37.960194357201978;126.835787836562503,37.960194587537273;126.835863299569752,37.960316914220648;126.835940543708389,37.960442586311672;126.840127284076544,37.97898691896777;126.848809575755041,37.98653924057961;126.886134313089201,37.966148720907277;126.886227064926047,37.9661379135799;126.88630344283709,37.966147798323142;126.894053712046968,37.969483822701172;126.893597603437271,37.993673776859929;126.937469023517565,37.980988749503034;126.972217443236602,38.007528802387775;126.972224606299164,38.007524867714665";

//천안.
//        tmp = "127.290409836814632,36.892396770294198;127.307997280983216,36.885064044184489;127.359180709406971,36.8220044451338;127.381490313197233,36.814082702248847;127.394982769016465,36.784094754656898;127.403318157555034,36.774474973431765;127.413077577146296,36.773058934178316;127.420317776521856,36.761012090331612;127.419890706981647,36.757876899031913;127.412802166014416,36.757420929606432;127.410924230464516,36.756057155312334;127.404198090010155,36.744850346739291;127.385593237192779,36.759539635385295;127.33550795250261,36.752641846202053;127.343166205836155,36.735695292059887;127.33920284119796,36.729725185974836;127.329398567366312,36.734454155048553;127.318461419924063,36.725250195132496;127.315561985217656,36.724185556588772;127.28526315057654,36.690606043445833;127.215110192203696,36.718213314307746;127.211449178722518,36.718292758576148;127.171462954971801,36.732037204270981;127.167840601591394,36.733090436215079;127.157525637580747,36.727456095036842;127.151934287731592,36.728952109654685;127.152051284880784,36.726807584420683;127.151945710919279,36.726681838568467;127.149288425509042,36.725932179155357;127.14762072455639,36.722303014605529;127.148819334980914,36.721018013290369;127.135669738311776,36.713018959350308;127.141748934128898,36.689983826352929;127.156573499188553,36.691020883089656;127.157093061109151,36.695080035169624;127.158054108377272,36.695324611148763;127.161444902245819,36.690218629817267;127.159938692488495,36.68840938873285;127.160769621895241,36.687701742019406;127.163932777606689,36.679507954169779;127.160049896192675,36.626369480203934;127.150901768011678,36.620151374499088;127.127632054181007,36.653353396483141;127.123959732558362,36.652992831104598;127.111415114645567,36.658807770778182;127.0447713316358,36.651302277562131;127.039920450404196,36.65470315755411;127.020408081366682,36.650142231830145;127.012849978621546,36.654414552512073;127.072939325622471,36.708366194889273;127.086530469580651,36.749263452503271;127.096113398996749,36.751443950694508;127.098163917741033,36.755725689441618;127.092075145226417,36.761032965755554;127.116526073381053,36.762879671930044;127.11758579009836,36.78046408078896;127.11271561701038,36.782552546742878;127.100644887604474,36.782709861146706;127.100840742070446,36.788465262658882;127.095586797780854,36.795912725899328;127.096926680676674,36.815692314591232;127.102151023801042,36.82520253329929;127.100602858669248,36.827273825899049;127.105617643244472,36.836486105937738;127.105322247800146,36.837862237526828;127.098172089837902,36.837957527991755;127.0981690681472,36.840153682272287;127.110499886598774,36.854108068291573;127.106839591262982,36.860292819862977;127.087420302377296,36.861862392622207;127.088342165384461,36.889309709514841;127.092951752649995,36.893611201130476;127.091915427668013,36.89424556014832;127.089424788249005,36.899838264176609;127.0890187772156,36.900267257829398;127.087344603991923,36.907225953844708;127.094029468795497,36.911484642097101;127.080365675823018,36.930252085121118;127.079667718966363,36.932580600205419;127.074983887323,36.935702454315638;127.074902309431664,36.939856161555269;127.085661859316318,36.947532459472768;127.095276058198323,36.942334932548498;127.097003204522167,36.947994128433521;127.102918317541764,36.95327829726039;127.096680490983985,36.95556658524815;127.09653325315189,36.959127256172806;127.107899584689676,36.968809703074143;127.110853220394958,36.969224343767337;127.114779767282002,36.971156285530121;127.120382291821244,36.970229738289632;127.136780969034447,36.965661729865452;127.158877323422914,36.969923618916646;127.16355628227214,36.962654649438129;127.173427079422467,36.962793946077568;127.179534420125108,36.957369454205256;127.179657179485616,36.957288173651662;127.20214345268171,36.951710662199069;127.202109627730366,36.95165665460425;127.220035973610592,36.930467596211521;127.235516775129625,36.924031399282349;127.244049169885514,36.917598612407964;127.248934152768612,36.919039232334242;127.258608526801694,36.915873900497957;127.265036666030369,36.915229053463833;127.274288801324602,36.913442042615173;127.289875839841756,36.894022071880983;127.290409836814632,36.892396770294198";

//대전.
        tmp = "127.291875706480411,36.263546280192053;127.291751123763063,36.264687698143774;127.290136573443633,36.265911421100668;127.282092622708944,36.264927598661224;127.281245251582163,36.265184889105271;127.279495868500618,36.266033584929893;127.258317618753054,36.276373320326314;127.254219814366238,36.280474195611227;127.253638125619986,36.282362364446854;127.251262032655902,36.283990010598259;127.246652951859986,36.290959041523109;127.258417709150265,36.303503207457219;127.258642244236526,36.309208041440847;127.25801224853241,36.309933013875394;127.259766482591985,36.327254305491394;127.26618666961015,36.328391782202765;127.268120954252169,36.331409113279712;127.270569403460698,36.360857245028875;127.272341036101963,36.362618219594061;127.282120352802067,36.414610498512623;127.291086114315235,36.41615151736827;127.293485428276867,36.418576250147453;127.295312063365742,36.419769736601353;127.294192033619311,36.422202538424258;127.296418241975076,36.423207937070444;127.341061314977466,36.430813363081278;127.356712097235174,36.458944416492081;127.357667812320102,36.46148102614243;127.356069066767674,36.464014374952264;127.35900346259055,36.467610022034819;127.363853489293689,36.474362192546181;127.363884141936424,36.475220580424399;127.357762718798128,36.483185108307438;127.36098768736008,36.490877184599178;127.368905547541431,36.489589738764479;127.380336849467398,36.499538917426158;127.383855394986227,36.500230190735124;127.403014362841461,36.485483169923235;127.400903319135153,36.457566055858756;127.402550216483732,36.455561733574491;127.414968799281326,36.454706397791917;127.42745213188158,36.456871280321735;127.436769111688577,36.456402070526131;127.44716884398963,36.449203454430162;127.449631477224273,36.449231713908702;127.454762853644553,36.450274779513244;127.459989180744245,36.453650978020079;127.466695704890142,36.470072593339488;127.47093407261498,36.474142348878914;127.472428128799066,36.475020064101066;127.476130865248066,36.47633102692911;127.48403346868372,36.476621891574325;127.477481730525113,36.458937128357704;127.484544653533874,36.452928836522844;127.500591927932732,36.456202675358043;127.504455229706849,36.451896487198098;127.504473059802834,36.451831583413494;127.489721719471319,36.434124700123455;127.501554863221514,36.408653359366753;127.501562432876057,36.408653327670748;127.509497263637144,36.408619838787274;127.513924057575167,36.420439317404629;127.542280682680527,36.419278821222576;127.559678961509235,36.398218349080935;127.533674110398934,36.392939609960429;127.533423832836363,36.391747079604926;127.52940215159245,36.389356921381768;127.526578222665307,36.370067156608378;127.522395531432281,36.35432430910457;127.521607421055393,36.353746410776886;127.519369035617004,36.350352456339607;127.517112865865087,36.349063608397437;127.517625200256731,36.348146084421401;127.517282560399892,36.348012821730322;127.515776266025284,36.348677866296711;127.507436673332919,36.346293856128753;127.507459719524206,36.346286702436942;127.496228897586931,36.278755014695093;127.488753469757484,36.272710129154717;127.483545891114133,36.230356403347095;127.477857101948487,36.229668206763982;127.455591662037605,36.200800209821665;127.443694517619079,36.194752739310978;127.441101927079089,36.194786359594325;127.412553246065755,36.211072047712861;127.409975874423253,36.211703539765921;127.409537111296018,36.212168202486303;127.400968707151549,36.230979345957124;127.387337530007855,36.234150771563257;127.389609943670195,36.263019254828308;127.377613723451148,36.271468917520707;127.377592141160179,36.271468282469272;127.372460484925512,36.272183030984927;127.372447803311545,36.272160693998693;127.364533484265962,36.219846377964465;127.364524972656312,36.219804705770933;127.331717136155049,36.184045633659103;127.318090981049465,36.216007551250947;127.305239827341325,36.227887772145721;127.303454348649723,36.227168611567322;127.303563099673909,36.221827144698864;127.30159876269154,36.22152244617903;127.295929128599752,36.222195598318898;127.294596704518327,36.22298068814888;127.293570743421853,36.223120348918904;127.293332117308765,36.22417162896329;127.29344317516879,36.224336465123812;127.291662544929125,36.226507581753452;127.291635683718297,36.226793693587481;127.287351217731086,36.234396634916585;127.286106981178946,36.234414389630452;127.282945775698622,36.235401297724785;127.28288997683218,36.235661773404097;127.281930062406317,36.235692639922959;127.28180975447971,36.235935233490373;127.282435791213928,36.23631068730684;127.281127574028318,36.245911890834506;127.280389843431053,36.249293271598859;127.28031477766713,36.250189253205463;127.279917174759646,36.250769020425594;127.27957872064971,36.252324309250284;127.279107618993123,36.25259486719056;127.279144975430853,36.253108898243923;127.281914349234711,36.255080469569748;127.282140998671764,36.257254255796049;127.282358259842042,36.25816643945744;127.284772236699965,36.259983862686639;127.291875706480411,36.263546280192053";

        Savepoint_suburb(tmp);

        Readpoint_suburb();

//    for (int i = 0; i < msuburbpoint.size(); i++) {

//            Log.d(TAG, "x " + msuburbpoint.get(i).x + " y " + msuburbpoint.get(i).y);

//        }

    }

    public static boolean Suburb_check(double x, double y)
    {

        String sResult = "";
        boolean bResult = false;
        int hitCount = 0;

            double maxX = 0;
            double maxY = 0;
            double minX = 600000;
            double minY = 600000;

            int idx = 0;

            for (idx = 0; idx < msuburbpoint.size(); idx++) {
                gpspoint pxy = msuburbpoint.get(idx);
                maxX = __max(maxX, pxy.x);
                maxY = __max(maxY, pxy.y);
                minX = __min(minX, pxy.x);
                minY = __min(minY, pxy.y);
            }
            if (maxX < x || x < minX) {
                return false;
            }
            if (maxY < y || y < minY) {
                return false;
            }

            /* 다각형의 선분과 만나는 지점의 갯수 */
            /* 클릭한 좌표가 검사하는 선분의 Y좌표 범위를 벗어난다면 검사하지 않음 */

            ArrayList<gpspoint> tPoint = new ArrayList();

            for (idx = 0; idx < msuburbpoint.size(); idx++) {

                if (idx != (msuburbpoint.size() - 1)) {
                    tPoint.add(msuburbpoint.get(idx + 1));

                } else {
                    tPoint.add(msuburbpoint.get(0));
                }
            }

            /* 다각형내부 좌표인지 검사 */
            gpspoint tmpPt = new gpspoint(x, y);
            gpspoint tmpPt2 = new gpspoint(x + maxX, y);

//			util.log("waitarea[i].gpspoint.length : "
///					+ waitera.get(i).gpspoint.size());

            for (idx = 0; idx < msuburbpoint.size(); idx++) {
                /* 클릭한 좌표가 검사하는 선분의 Y좌표 범위를 벗어난다면 검사하지 않음 */
                gpspoint p = msuburbpoint.get(idx);

                if (__min(p.y, tPoint.get(idx).y) > y) // 해당선분의 최소Y값보다 작을때
                    continue;
                if (__max(p.y, tPoint.get(idx).y) < y) // 해당선분의 최대Y값보다 클때
                    continue;

                /* 교차여부 검사 */
                // 대기지역좌표1, 대기지역좌표2/ 현재좌표/ 최소좌표(가상점)
                if (Intersection(msuburbpoint.get(idx),
                        tPoint.get(idx), tmpPt, tmpPt2)) {
                    hitCount++;
                }
            }

            /* 만나는지점의 갯수가 짝수(0,2,4,6...)라면 외부 홀수(1,3,5,7...)라면 내부 */

            if (hitCount % 2 == 0) {

                bResult = false;

            } else {

                bResult = true;

            }

        return bResult;

    }

    static boolean Intersection(gpspoint p1, gpspoint p2, gpspoint p3, gpspoint p4) {
        if ((SignedArea(p1, p2, p3) * SignedArea(p1, p2, p4) <= 0)
                && (SignedArea(p3, p4, p1) * SignedArea(p3, p4, p2) <= 0)) {
            return true;
        } else {
            return false;
        }

    }

    static double __min(double x, double y) {
        if (x < y) {
            return x;
        } else {
            return y;
        }
    }

   static double __max(double x, double y) {
        if (x > y) {
            return x;
        } else {
            return y;
        }
    }

   static int SignedArea(gpspoint p1, gpspoint p2, gpspoint p3) {
        double area = ((p1.x * p2.y - p1.y * p2.x)
                + (p2.x * p3.y - p2.y * p3.x) + (p3.x * p1.y - p3.y * p1.x));

        if (area > 0)
            return 1;
        else
            return -1;

    }

//////////////

}
